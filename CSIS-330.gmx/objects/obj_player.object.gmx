<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialization

state = 'idle';
player_speed = 4;
movement_tracking = 32; // we move 32 pixels per command
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement Control

// setting shortcuts for out movement keys
var left = keyboard_check(vk_left);
var right = keyboard_check(vk_right);
var up = keyboard_check(vk_up);
var down = keyboard_check(vk_down);

// ***LEFT COMMAND***

// First we make sure we are in idle state (not moving)
if (left) &amp;&amp; state == 'idle' {
    // Then we change our state based on what is left of us.
    state = 'moving_left';
    if place_meeting(x-player_speed,y,obj_crate) {
        state = 'pushing_left';
    }
}

// RIGHT COMMAND

// First we make sure we are in idle state (not moving)
if (right) &amp;&amp; state == 'idle' {
    // Then we change our state based on what is left of us.
    state = 'moving_right';
    if place_meeting(x+1,y,obj_crate) {
        state = 'pushing_right';
    }
}

// Movement
if state == 'idle' &amp;&amp; movement_tracking != 32 {
    // before we start moving, reset movement tracking
    movement_tracking = 32;
}

switch (state) {
    // LEFT
    case 'moving_left':
        x -= player_speed;
        movement_tracking -= player_speed;
        if movement_tracking &lt;= 0 {
            state = 'idle';
        }
        break;
    case 'pushing_left':
        x -= player_speed;
        movement_tracking -= player_speed;
        if movement_tracking &lt;= 0 {
            state = 'idle';
        }
        var crate = instance_place(x-1,y,obj_crate);
        var crate_speed = player_speed;
        with (crate) {
            x -= crate_speed;
        }
        break;
    // RIGHT
    case 'moving_right':
        x += player_speed;
        movement_tracking -= player_speed;
        if movement_tracking &lt;= 0 {
            state = 'idle';
        }
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
